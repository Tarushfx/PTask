scalar GraphQLDate

enum State {
  InProgress
  Completed
}

type Team {
  title: String!
  members: [ID!]
  description: String
}

type Project {
  title: String!
  created: GraphQLDate!
  state: State!
  description: String
}

type Task {
  _id: ID!
  title: String!
  created: GraphQLDate!
  deadline: GraphQLDate!
  state: State!
  description: String
}

type UserData {
  _id: ID!
  name: String!
  email: String!
  tasks: [Task]
  projects: [Project]
  likes: [String]
  team: Team
}

type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  token: String
}

input UserUpdateNameInputs {
  _id: ID!
  name: String!
}

input UserUpdateInputs {
  _id: ID!
  name: String!
  password: String!
}

input TaskInput {
  _id: ID!
  title: String!
  deadline: GraphQLDate
  description: String
}

input ProjectInput {
  _id: ID!
  title: String!
  description: String
}

input getData {
  _id: ID!
}

input UserInputs {
  name: String!
  email: String!
  password: String!
}

input UserLoginInputs {
  email: String!
  password: String!
}

input TaskUpdate {
  _id: ID!
  task_id: ID!
  state: State!
}

input TaskRemove {
  _id: ID!
  task_id: ID!
}

type Query {
  about: String!
  userData(user: getData!): UserData!
  UserSignIn(user: UserLoginInputs!): User
}

type Mutation {
  setAboutMessage(message: String!): String!
  UserAdd(user: UserInputs!): User!
  addTask(task: TaskInput!): Task
  addProject(project: ProjectInput!): Project
  UserUpdate(user: UserUpdateInputs!): String
  UserUpdateName(user: UserUpdateNameInputs!): String
  UserDelete(user: getData!) : String
  TaskStateUpdate(task: TaskUpdate!): String
  TaskRemove(task: TaskRemove!): String
}
