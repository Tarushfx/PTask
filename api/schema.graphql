scalar GraphQLDate

enum State {
  InProgress
  Completed
}

type Message {
  _id: ID!
  date: GraphQLDate!
  user: String!
  email:String
  content: String!
}

input MessageInput {
  _id: ID!
  user: String!
  email: String!
  content: String!
}


type Subscription {
  messages: [Message!]
}

type Notifications {
  _id: ID!
  text: String!
  type: Int
  status: Boolean!
}

input TeamJoin{
  _id: ID!
  team_id: ID!
}

input TeamInput {
  title: String!
  description: String
}

type Team {
  _id: ID!
  title: String!
  description: String
}

type Project {
  _id: ID!
  title: String!
  created: GraphQLDate!
  state: State!
  description: String
}

type Task {
  _id: ID!
  title: String!
  created: GraphQLDate!
  deadline: GraphQLDate!
  state: State!
  description: String
}

type UserData {
  _id: ID!
  name: String!
  email: String!
  tasks: [Task]
  projects: [Project]
  likes: [String]
  teams: [Team]
  notifications: [Notifications]
}

type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  token: String
}

input UserUpdateNameInputs {
  _id: ID!
  name: String!
}

input UserUpdateInputs {
  _id: ID!
  name: String!
  password: String!
}

input TaskInput {
  _id: ID!
  title: String!
  deadline: GraphQLDate
  description: String
}

input ProjectInput {
  _id: ID!
  title: String!
  description: String
}

input getData {
  _id: ID!
}

input UserInputs {
  name: String!
  email: String!
  password: String!
}

input UserLoginInputs {
  email: String!
  password: String!
}

input TaskUpdate {
  _id: ID!
  task_id: ID!
  state: State!
}

input TaskRemove {
  _id: ID!
  task_id: ID!
}

input ProjectRemove {
  _id: ID!
  project_id: ID!
}

input NotifAdd {
  _id: ID!
  text: String!
  type: Int!
  status: Boolean!
}

input NotifUpdate {
  _id: ID!
  notif_id: ID!
  status: Boolean!
}

input NotifRemove {
  _id: ID!
  notif_id: ID!
}

input LikesInput {
  _id: ID!
  likes: [String!]!
}

input TaskUpdateInput {
  _id: ID!
  task_id: ID!
  title: String!
  deadline: GraphQLDate!
  description: String!
  state: State!
}

type Query {
  about: String!
  userData(user: getData!): UserData!
  UserSignIn(user: UserLoginInputs!): User
  messages: [Message!]
}

type Mutation {
  setAboutMessage(message: String!): String!
  UserAdd(user: UserInputs!): User
  addTask(task: TaskInput!): Task
  addProject(project: ProjectInput!): Project
  UserUpdate(user: UserUpdateInputs!): String
  UserUpdateName(user: UserUpdateNameInputs!): String
  UserDelete(user: getData!): String
  TaskStateUpdate(task: TaskUpdate!): String
  TaskUpdate(task: TaskUpdateInput!): String
  TaskRemove(task: TaskRemove!): String
  ProjectRemove(project: ProjectRemove!): String
  NotifAdd(notif: NotifAdd!): String
  NotifUpdate(notif: NotifUpdate!): String
  NotifRemove(notif: NotifRemove!): String
  addLikes(likes: LikesInput!): String
  postMessage(message: MessageInput!): ID!
  TeamAdd(team: TeamInput!): Team!
  JoinTeam(team: TeamJoin!): Boolean!
}
